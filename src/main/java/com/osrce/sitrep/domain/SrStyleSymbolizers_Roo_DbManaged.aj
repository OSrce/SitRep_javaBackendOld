// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.osrce.sitrep.domain;

import com.osrce.sitrep.domain.SrStyleSymbolizers;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import org.springframework.format.annotation.DateTimeFormat;

privileged aspect SrStyleSymbolizers_Roo_DbManaged {
    
    @Column(name = "name", length = 128)
    @NotNull
    private String SrStyleSymbolizers.name;
    
    @Column(name = "label", length = 128)
    private String SrStyleSymbolizers.label;
    
    @Column(name = "fillcolor", length = 32)
    private String SrStyleSymbolizers.fillcolor;
    
    @Column(name = "fillopacity", precision = 8, scale = 8)
    private Float SrStyleSymbolizers.fillopacity;
    
    @Column(name = "strokecolor", length = 32)
    private String SrStyleSymbolizers.strokecolor;
    
    @Column(name = "strokeopacity", precision = 8, scale = 8)
    private Float SrStyleSymbolizers.strokeopacity;
    
    @Column(name = "strokewidth")
    private Integer SrStyleSymbolizers.strokewidth;
    
    @Column(name = "pointradius")
    private Integer SrStyleSymbolizers.pointradius;
    
    @Column(name = "fontcolor", length = 32)
    private String SrStyleSymbolizers.fontcolor;
    
    @Column(name = "fontsize")
    private Integer SrStyleSymbolizers.fontsize;
    
    @Column(name = "fontfamily", length = 64)
    private String SrStyleSymbolizers.fontfamily;
    
    @Column(name = "fontweight", length = 32)
    private String SrStyleSymbolizers.fontweight;
    
    @Column(name = "fontopacity", precision = 8, scale = 8)
    private Float SrStyleSymbolizers.fontopacity;
    
    @Column(name = "labelalign", length = 32)
    private String SrStyleSymbolizers.labelalign;
    
    @Column(name = "labelxoffset")
    private Integer SrStyleSymbolizers.labelxoffset;
    
    @Column(name = "labelyoffset")
    private Integer SrStyleSymbolizers.labelyoffset;
    
    @Column(name = "externalgraphic", length = 128)
    private String SrStyleSymbolizers.externalgraphic;
    
    @Column(name = "graphicwidth")
    private Integer SrStyleSymbolizers.graphicwidth;
    
    @Column(name = "graphicheight")
    private Integer SrStyleSymbolizers.graphicheight;
    
    @Column(name = "graphicopacity", precision = 8, scale = 8)
    private Float SrStyleSymbolizers.graphicopacity;
    
    @Column(name = "rotation")
    private Integer SrStyleSymbolizers.rotation;
    
    @Column(name = "created_on")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "M-")
    private Date SrStyleSymbolizers.createdOn;
    
    @Column(name = "updated_on")
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(style = "M-")
    private Date SrStyleSymbolizers.updatedOn;
    
    @Column(name = "created_by")
    private Integer SrStyleSymbolizers.createdBy;
    
    @Column(name = "updated_by")
    private Integer SrStyleSymbolizers.updatedBy;
    
    public String SrStyleSymbolizers.getName() {
        return name;
    }
    
    public void SrStyleSymbolizers.setName(String name) {
        this.name = name;
    }
    
    public String SrStyleSymbolizers.getLabel() {
        return label;
    }
    
    public void SrStyleSymbolizers.setLabel(String label) {
        this.label = label;
    }
    
    public String SrStyleSymbolizers.getFillcolor() {
        return fillcolor;
    }
    
    public void SrStyleSymbolizers.setFillcolor(String fillcolor) {
        this.fillcolor = fillcolor;
    }
    
    public Float SrStyleSymbolizers.getFillopacity() {
        return fillopacity;
    }
    
    public void SrStyleSymbolizers.setFillopacity(Float fillopacity) {
        this.fillopacity = fillopacity;
    }
    
    public String SrStyleSymbolizers.getStrokecolor() {
        return strokecolor;
    }
    
    public void SrStyleSymbolizers.setStrokecolor(String strokecolor) {
        this.strokecolor = strokecolor;
    }
    
    public Float SrStyleSymbolizers.getStrokeopacity() {
        return strokeopacity;
    }
    
    public void SrStyleSymbolizers.setStrokeopacity(Float strokeopacity) {
        this.strokeopacity = strokeopacity;
    }
    
    public Integer SrStyleSymbolizers.getStrokewidth() {
        return strokewidth;
    }
    
    public void SrStyleSymbolizers.setStrokewidth(Integer strokewidth) {
        this.strokewidth = strokewidth;
    }
    
    public Integer SrStyleSymbolizers.getPointradius() {
        return pointradius;
    }
    
    public void SrStyleSymbolizers.setPointradius(Integer pointradius) {
        this.pointradius = pointradius;
    }
    
    public String SrStyleSymbolizers.getFontcolor() {
        return fontcolor;
    }
    
    public void SrStyleSymbolizers.setFontcolor(String fontcolor) {
        this.fontcolor = fontcolor;
    }
    
    public Integer SrStyleSymbolizers.getFontsize() {
        return fontsize;
    }
    
    public void SrStyleSymbolizers.setFontsize(Integer fontsize) {
        this.fontsize = fontsize;
    }
    
    public String SrStyleSymbolizers.getFontfamily() {
        return fontfamily;
    }
    
    public void SrStyleSymbolizers.setFontfamily(String fontfamily) {
        this.fontfamily = fontfamily;
    }
    
    public String SrStyleSymbolizers.getFontweight() {
        return fontweight;
    }
    
    public void SrStyleSymbolizers.setFontweight(String fontweight) {
        this.fontweight = fontweight;
    }
    
    public Float SrStyleSymbolizers.getFontopacity() {
        return fontopacity;
    }
    
    public void SrStyleSymbolizers.setFontopacity(Float fontopacity) {
        this.fontopacity = fontopacity;
    }
    
    public String SrStyleSymbolizers.getLabelalign() {
        return labelalign;
    }
    
    public void SrStyleSymbolizers.setLabelalign(String labelalign) {
        this.labelalign = labelalign;
    }
    
    public Integer SrStyleSymbolizers.getLabelxoffset() {
        return labelxoffset;
    }
    
    public void SrStyleSymbolizers.setLabelxoffset(Integer labelxoffset) {
        this.labelxoffset = labelxoffset;
    }
    
    public Integer SrStyleSymbolizers.getLabelyoffset() {
        return labelyoffset;
    }
    
    public void SrStyleSymbolizers.setLabelyoffset(Integer labelyoffset) {
        this.labelyoffset = labelyoffset;
    }
    
    public String SrStyleSymbolizers.getExternalgraphic() {
        return externalgraphic;
    }
    
    public void SrStyleSymbolizers.setExternalgraphic(String externalgraphic) {
        this.externalgraphic = externalgraphic;
    }
    
    public Integer SrStyleSymbolizers.getGraphicwidth() {
        return graphicwidth;
    }
    
    public void SrStyleSymbolizers.setGraphicwidth(Integer graphicwidth) {
        this.graphicwidth = graphicwidth;
    }
    
    public Integer SrStyleSymbolizers.getGraphicheight() {
        return graphicheight;
    }
    
    public void SrStyleSymbolizers.setGraphicheight(Integer graphicheight) {
        this.graphicheight = graphicheight;
    }
    
    public Float SrStyleSymbolizers.getGraphicopacity() {
        return graphicopacity;
    }
    
    public void SrStyleSymbolizers.setGraphicopacity(Float graphicopacity) {
        this.graphicopacity = graphicopacity;
    }
    
    public Integer SrStyleSymbolizers.getRotation() {
        return rotation;
    }
    
    public void SrStyleSymbolizers.setRotation(Integer rotation) {
        this.rotation = rotation;
    }
    
    public Date SrStyleSymbolizers.getCreatedOn() {
        return createdOn;
    }
    
    public void SrStyleSymbolizers.setCreatedOn(Date createdOn) {
        this.createdOn = createdOn;
    }
    
    public Date SrStyleSymbolizers.getUpdatedOn() {
        return updatedOn;
    }
    
    public void SrStyleSymbolizers.setUpdatedOn(Date updatedOn) {
        this.updatedOn = updatedOn;
    }
    
    public Integer SrStyleSymbolizers.getCreatedBy() {
        return createdBy;
    }
    
    public void SrStyleSymbolizers.setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }
    
    public Integer SrStyleSymbolizers.getUpdatedBy() {
        return updatedBy;
    }
    
    public void SrStyleSymbolizers.setUpdatedBy(Integer updatedBy) {
        this.updatedBy = updatedBy;
    }
    
}
