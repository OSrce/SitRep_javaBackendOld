// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.osrce.sitrep.web;

import com.osrce.sitrep.domain.SrUsers;
import com.osrce.sitrep.web.SrUsersController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect SrUsersController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{uid}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SrUsersController.showJson(@PathVariable("uid") Integer uid) {
        SrUsers srUsers = SrUsers.findSrUsers(uid);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (srUsers == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(srUsers.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SrUsersController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<SrUsers> result = SrUsers.findAllSrUserses();
        return new ResponseEntity<String>(SrUsers.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SrUsersController.createFromJson(@RequestBody String json) {
        SrUsers srUsers = SrUsers.fromJsonToSrUsers(json);
        srUsers.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SrUsersController.createFromJsonArray(@RequestBody String json) {
        for (SrUsers srUsers: SrUsers.fromJsonArrayToSrUserses(json)) {
            srUsers.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SrUsersController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        SrUsers srUsers = SrUsers.fromJsonToSrUsers(json);
        if (srUsers.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SrUsersController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (SrUsers srUsers: SrUsers.fromJsonArrayToSrUserses(json)) {
            if (srUsers.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{uid}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> SrUsersController.deleteFromJson(@PathVariable("uid") Integer uid) {
        SrUsers srUsers = SrUsers.findSrUsers(uid);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (srUsers == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        srUsers.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
