// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.osrce.sitrep.web;

import com.osrce.sitrep.domain.SrLocationsWorkqueue;
import com.osrce.sitrep.web.SrLocationsWorkqueueController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect SrLocationsWorkqueueController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SrLocationsWorkqueueController.showJson(@PathVariable("id") Integer id) {
        SrLocationsWorkqueue srLocationsWorkqueue = SrLocationsWorkqueue.findSrLocationsWorkqueue(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (srLocationsWorkqueue == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(srLocationsWorkqueue.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SrLocationsWorkqueueController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<SrLocationsWorkqueue> result = SrLocationsWorkqueue.findAllSrLocationsWorkqueues();
        return new ResponseEntity<String>(SrLocationsWorkqueue.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SrLocationsWorkqueueController.createFromJson(@RequestBody String json) {
        SrLocationsWorkqueue srLocationsWorkqueue = SrLocationsWorkqueue.fromJsonToSrLocationsWorkqueue(json);
        srLocationsWorkqueue.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SrLocationsWorkqueueController.createFromJsonArray(@RequestBody String json) {
        for (SrLocationsWorkqueue srLocationsWorkqueue: SrLocationsWorkqueue.fromJsonArrayToSrLocationsWorkqueues(json)) {
            srLocationsWorkqueue.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SrLocationsWorkqueueController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        SrLocationsWorkqueue srLocationsWorkqueue = SrLocationsWorkqueue.fromJsonToSrLocationsWorkqueue(json);
        if (srLocationsWorkqueue.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SrLocationsWorkqueueController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (SrLocationsWorkqueue srLocationsWorkqueue: SrLocationsWorkqueue.fromJsonArrayToSrLocationsWorkqueues(json)) {
            if (srLocationsWorkqueue.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> SrLocationsWorkqueueController.deleteFromJson(@PathVariable("id") Integer id) {
        SrLocationsWorkqueue srLocationsWorkqueue = SrLocationsWorkqueue.findSrLocationsWorkqueue(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (srLocationsWorkqueue == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        srLocationsWorkqueue.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
